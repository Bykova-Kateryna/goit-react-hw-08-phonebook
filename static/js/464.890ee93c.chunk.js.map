{"version":3,"file":"static/js/464.890ee93c.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.stysed.js","components/Loader/LoaderFromButtonAdd.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/ContactList/ContactList.styled.js","components/Loader/LoaderFromButtonDelete.jsx","components/ContactList/ContactList.jsx","components/Phonebook/Phonebook.jsx"],"sourcesContent":["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import styled from 'styled-components';\n\nexport const ContactFofmSection = styled.div`\n  background-color: tranperent;\n  max-width: 400px;\n  padding: 15px;\n  margin-top: 20px;\n`;\n\nexport const Fofm = styled.form`\n  background: rgba(200, 205, 206, 0.6);\n  border-radius: 20px;\n  color: #fff;\n  display: flex;\n  flex-direction: column;\n  max-width: 400px;\n  padding: 20px;\n`;\n\nexport const FormLabel = styled.label`\n  margin-right: 15px;\n  font-family: 'Roboto', sans-serif;\n  text-transform: uppercase;\n  font-size: 14px;\n`;\n\nexport const FormInput = styled.input`\n  display: block;\n  padding: 0 15px;\n  border-width: 0;\n  line-height: 25px;\n  border-radius: 20px;\n  color: #000;\n  background: rgba(255, 255, 255, 0.2);\n  font-family: 'Roboto', sans-serif;\n  &:hover,\n  &:focus {\n    border: 2px solid #fff;\n  }\n`;\nexport const FormBtn = styled.button`\n  width: 75%;\n  font-family: 'Roboto', sans-serif;\n  text-transform: uppercase;\n  border-radius: 20px;\n  border-width: 0;\n  background: rgba(255, 255, 255, 0.5);\n  cursor: pointer;\n  margin-top: 10px;\n  margin-left: auto;\n  margin-right: auto;\n\n  &:hover,\n  &:focus {\n    background: #fff;\n    color: #00d0ff;\n  }\n`;\n","import { ProgressBar } from 'react-loader-spinner';\nexport const LoaderFromButtonAdd = () => {\n  return (\n    <div>\n      <p>add contact...</p>\n      <ProgressBar\n        height=\"80\"\n        width=\"80\"\n        ariaLabel=\"progress-bar-loading\"\n        wrapperStyle={{}}\n        wrapperClass=\"progress-bar-wrapper\"\n        borderColor=\"#000\"\n        barColor=\"#51E5FF\"\n      />\n    </div>\n  );\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../../redux/operations';\nimport { nanoid } from 'nanoid';\nimport { Report } from 'notiflix/build/notiflix-report-aio';\nimport {\n  ContactFofmSection,\n  Fofm,\n  FormLabel,\n  FormInput,\n  FormBtn,\n} from './ContactForm.stysed';\nimport { LoaderFromButtonAdd } from '../Loader/LoaderFromButtonAdd';\n\nfunction PhoneBookForm() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.phonebook.items);\n  const loading = useSelector(state => state.phonebook.isLoading);\n  const actionType = useSelector(state => state.phonebook.actionTypeStatus);\n\n  const contactNameId = nanoid();\n  const contactTellId = nanoid();\n\n  const findName = name => {\n    return contacts.find(contact => {\n      const nameInContacts = contact.name.toLocaleLowerCase();\n      const newName = name.toLocaleLowerCase();\n      return nameInContacts === newName;\n    });\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.target;\n    const addName = {\n      name: form.elements.name.value,\n      number: form.elements.number.value,\n    };\n    if (findName(form.elements.name.value)) {\n      return Report.failure(\n        'Something went wrong',\n        'This name is already in the contact list!',\n        'Okay'\n      );\n    } else {\n      dispatch(addContact(addName));\n      form.reset();\n    }\n  };\n\n  return (\n    <ContactFofmSection>\n      <Fofm onSubmit={handleSubmit}>\n        <FormLabel htmlFor={contactNameId}>Name</FormLabel>\n        <FormInput\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          id={contactNameId}\n        />\n\n        <FormLabel htmlFor={contactTellId}>Number</FormLabel>\n        <FormInput\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          id={contactTellId}\n        />\n\n        {loading && actionType === 'contacts/addContact/pending' ? (\n          <LoaderFromButtonAdd />\n        ) : (\n          <FormBtn type=\"submit\">Add contact</FormBtn>\n        )}\n      </Fofm>\n    </ContactFofmSection>\n  );\n}\n\nexport default PhoneBookForm;\n","import styled from 'styled-components';\n\nexport const FilterSection = styled.div`\n  background: rgba(200, 205, 206, 0.6);\n  border-radius: 20px;\n  padding: 15px;\n  margin-top: 15px;\n  margin-bottom: 15px;\n  max-width: 400px;\n`;\n\nexport const FilterSectionLabel = styled.label`\n  display: block;\n  font-size: 14px;\n  font-family: 'Roboto', sans-serif;\n  text-transform: uppercase;\n`;\n\nexport const FilterSectionInput = styled.input`\n  display: block;\n  padding: 0 15px;\n  border-width: 0;\n  line-height: 25px;\n  border-radius: 20px;\n  color: #000;\n  background: rgba(255, 255, 255, 0.2);\n  font-family: 'Roboto', sans-serif;\n  margin-top: 10px;\n  &:hover,\n  &:focus {\n    border: 2px solid #fff;\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport { filterContact } from '../../redux/slice';\nimport { nanoid } from 'nanoid';\nimport {\n  FilterSection,\n  FilterSectionLabel,\n  FilterSectionInput,\n} from './Filter.styled';\n\nconst contactFindId = nanoid();\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleChange = event => {\n    dispatch(filterContact(event.currentTarget.value));\n  };\n  return (\n    <FilterSection>\n      <FilterSectionLabel htmlFor={contactFindId}>\n        Find contacts by name\n      </FilterSectionLabel>\n      <FilterSectionInput\n        type=\"text\"\n        name=\"filter\"\n        id={contactFindId}\n        onChange={handleChange}\n      />\n    </FilterSection>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ContactListSection = styled.ol`\n  background: rgba(200, 205, 206, 0.6);\n  border-radius: 20px;\n  padding-top: 15px;\n  padding-bottom: 15px;\n  margin-top: 15px;\n`;\n\nexport const ContactListItem = styled.li`\n  margin-top: 15px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const ContactListItemContext = styled.p`\n  margin-right: 10px;\n  color: #000;\n`;\n\nexport const DeleteBtn = styled.button`\n  cursor: pointer;\n  border-width: 0;\n  cursor: pointer;\n  font-size: 24px;\n  background: transparent;\n  &:hover,\n  &:focus {\n    border: 1px solid #00d0ff;\n    border-radius: 10px;\n  }\n`;\nexport const ErrorMesage = styled.p`\n  color: #fff;\n  text-transform: uppercase;\n  text-decoration: underline overline #ff3028;\n`;\nexport const ContactListMesage = styled.p`\n  color: #fff;\n  text-transform: uppercase;\n`;\n","import { Watch } from 'react-loader-spinner';\nexport const LoaderFromButtonDelete = () => {\n  return (\n    <div>\n      <Watch\n        height=\"20\"\n        width=\"20\"\n        radius=\"48\"\n        color=\"#000\"\n        ariaLabel=\"watch-loading\"\n        wrapperStyle={{}}\n        wrapperClassName=\"\"\n        visible={true}\n      />\n    </div>\n  );\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from '../../redux/operations';\nimport { useEffect, useState } from 'react';\nimport {\n  ContactListSection,\n  ContactListItem,\n  DeleteBtn,\n  ErrorMesage,\n  ContactListItemContext,\n  ContactListMesage,\n} from './ContactList.styled';\nimport { fetchContacts } from '../../redux/operations';\nimport { Loader } from '../Loader/Loader';\nimport { LoaderFromButtonDelete } from '../Loader/LoaderFromButtonDelete';\n\nexport const ContactList = () => {\n  const [onClick, setOnClick] = useState(false);\n  const contacts = useSelector(state => state.phonebook.items);\n  const loading = useSelector(state => state.phonebook.isLoading);\n  const error = useSelector(state => state.phonebook.error);\n  const filter = useSelector(state => state.filter);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const actionType = useSelector(state => state.phonebook.actionTypeStatus);\n\n  const filterContacts = () => {\n    if (!filter) {\n      return contacts;\n    }\n\n    const normalizedNameFilter = filter.toLocaleLowerCase();\n    const filteredName = contacts.filter(({ name }) => {\n      const normalizedName = name.toLocaleLowerCase();\n      const filterResult = normalizedName.includes(normalizedNameFilter);\n      return filterResult;\n    });\n    return filteredName;\n  };\n\n  return (\n    <>\n      {loading && actionType === 'contacts/fetchAll/pending' && <Loader />}\n      {error && (\n        <ErrorMesage>oops, something went wrong, change the side.</ErrorMesage>\n      )}\n      {contacts.length === 0 && (\n        <ContactListMesage>here will be your contacts</ContactListMesage>\n      )}\n      <ContactListSection>\n        {contacts.length !== 0 &&\n          [...filterContacts()]\n            .sort((firstName, secondName) =>\n              firstName.name.localeCompare(secondName.name)\n            )\n            .map(item => (\n              <ContactListItem key={item.id}>\n                <ContactListItemContext>\n                  {item.name}: {item.number}\n                </ContactListItemContext>\n                {loading &&\n                actionType === 'contacts/deleteContact/pending' &&\n                onClick &&\n                onClick === item.id ? (\n                  <LoaderFromButtonDelete />\n                ) : (\n                  <DeleteBtn\n                    type=\"button\"\n                    onClick={() => {\n                      dispatch(deleteContact(item.id));\n                      setOnClick(item.id);\n                    }}\n                  >\n                    &#128686;\n                  </DeleteBtn>\n                )}\n              </ContactListItem>\n            ))}\n      </ContactListSection>\n    </>\n  );\n};\n","import React from 'react';\nimport PhoneBookForm from '../ContactForm/ContactForm';\nimport { Filter } from '../Filter/Filter';\nimport { ContactList } from '../ContactList/ContactList';\nimport { ContactsContainer, PhoneBookFormTittle } from './Phonebook.styled';\n\nexport default function PhoneBookSection() {\n  return (\n    <ContactsContainer>\n      <div>\n        <PhoneBookFormTittle>Add contact in PHONEBOOK</PhoneBookFormTittle>\n        <PhoneBookForm />\n      </div>\n      <div>\n        <PhoneBookFormTittle>My contacts</PhoneBookFormTittle>\n        <Filter />\n        <ContactList />\n      </div>\n    </ContactsContainer>\n  );\n}\n"],"names":["nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","ContactFofmSection","styled","Fofm","FormLabel","FormInput","FormBtn","LoaderFromButtonAdd","height","width","ariaLabel","wrapperStyle","wrapperClass","borderColor","barColor","dispatch","useDispatch","contacts","useSelector","state","phonebook","items","loading","isLoading","actionType","actionTypeStatus","contactNameId","contactTellId","onSubmit","event","preventDefault","name","form","target","addName","elements","value","number","find","contact","toLocaleLowerCase","Report","addContact","reset","htmlFor","type","pattern","title","required","FilterSection","FilterSectionLabel","FilterSectionInput","contactFindId","Filter","onChange","filterContact","currentTarget","ContactListSection","ContactListItem","ContactListItemContext","DeleteBtn","ErrorMesage","ContactListMesage","LoaderFromButtonDelete","radius","color","wrapperClassName","visible","ContactList","useState","onClick","setOnClick","error","filter","useEffect","fetchContacts","Loader","length","normalizedNameFilter","includes","filterContacts","sort","firstName","secondName","localeCompare","map","item","deleteContact","PhoneBookSection"],"sourceRoot":""}